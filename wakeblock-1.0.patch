diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index 5fd9c58..39dc388 100644
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -19886,6 +19886,14 @@ Slog.v(TAG, ":: stepped forward, applying functor at tag " + parser.getName());
         }
 
         Slog.v(TAG, "reconcileAppsData finished " + preparedCount + " packages");
+        // @ WAKEBLOCK
+        try {
+            java.lang.reflect.Field bindTime = com.android.server.power.PowerManagerService.class.getDeclaredField("wakeBlockBindTime");
+            bindTime.setAccessible(true);
+            bindTime.set(null, true);
+        } catch (Exception exception) {
+        }
+        // # WAKEBLOCK
     }
 
     /**
diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java
index 01288b8..ad6a24b 100644
--- a/services/core/java/com/android/server/power/PowerManagerService.java
+++ b/services/core/java/com/android/server/power/PowerManagerService.java
@@ -510,6 +510,45 @@ public final class PowerManagerService extends SystemService
     private static native void nativeSendPowerHint(int hintId, int data);
     private static native void nativeSetFeature(int featureId, int data);
 
+    // @ WAKEBLOCK
+    private Handler wakeBlockHandler;
+    private android.os.Messenger wakeBlockClient = null;
+    private android.os.Messenger wakeBlockServer = null;
+    private boolean wakeBlockBound = false;
+    private static volatile boolean wakeBlockOk = true;
+    private static final Object wakeBlockLock = new Object();
+    private static boolean wakeBlockBindTime = false;
+    private final Intent wakeBlockServiceIntent = new Intent("com.giovannibozzano.wakeblock.Service");
+    private final android.content.ServiceConnection wakeBlockConnection = new android.content.ServiceConnection()
+    {
+        @Override
+        public void onServiceConnected(android.content.ComponentName className, IBinder service)
+        {
+            wakeBlockServer = new android.os.Messenger(service);
+            wakeBlockBound = true;
+            try {
+                Message message = Message.obtain(null, 3);
+                android.os.Bundle bundle = new android.os.Bundle();
+                bundle.putString("version", "1.0");
+                message.setData(bundle);
+                wakeBlockServer.send(message);
+            } catch (RemoteException exception) {
+                wakeBlockServer = null;
+                wakeBlockBound = false;
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(android.content.ComponentName className)
+        {
+            wakeBlockServer = null;
+            wakeBlockBound = false;
+            synchronized (wakeBlockLock) {
+                wakeBlockLock.notifyAll();
+            }
+        }
+    };
+    // # WAKEBLOCK
     public PowerManagerService(Context context) {
         super(context);
         mContext = context;
@@ -518,6 +557,34 @@ public final class PowerManagerService extends SystemService
         mHandlerThread.start();
         mHandler = new PowerManagerHandler(mHandlerThread.getLooper());
 
+        // @ WAKEBLOCK
+        android.os.HandlerThread wakeBlockHandlerThread = new android.os.HandlerThread("wakeblock_client");
+        wakeBlockHandlerThread.start();
+        wakeBlockHandler = new Handler(wakeBlockHandlerThread.getLooper())
+        {
+            @Override
+            public void handleMessage(Message message)
+            {
+                switch (message.what) {
+                    case 0:
+                        synchronized (wakeBlockLock) {
+                            wakeBlockLock.notify();
+                        }
+                        break;
+                    case 1:
+                        synchronized (wakeBlockLock) {
+                            wakeBlockOk = false;
+                            wakeBlockLock.notify();
+                        }
+                        break;
+                    default:
+                        super.handleMessage(message);
+                }
+            }
+        };
+        wakeBlockClient = new android.os.Messenger(wakeBlockHandler);
+        wakeBlockServiceIntent.setPackage("com.giovannibozzano.wakeblock");
+        // # WAKEBLOCK
         synchronized (mLock) {
             mWakeLockSuspendBlocker = createSuspendBlockerLocked("PowerManagerService.WakeLocks");
             mDisplaySuspendBlocker = createSuspendBlockerLocked("PowerManagerService.Display");
@@ -859,6 +926,20 @@ public final class PowerManagerService extends SystemService
 
     private void acquireWakeLockInternal(IBinder lock, int flags, String tag, String packageName,
             WorkSource ws, String historyTag, int uid, int pid) {
+        // @ WAKEBLOCK
+        if (wakeBlockBindTime) {
+            wakeBlockBindTime = false;
+            Thread thread = new Thread()
+            {
+                @Override
+                public void run()
+                {
+                    mContext.bindService(wakeBlockServiceIntent, wakeBlockConnection, Context.BIND_AUTO_CREATE);
+                }
+            };
+            thread.start();
+        }
+        // # WAKEBLOCK
         synchronized (mLock) {
             if (DEBUG_SPEW) {
                 Slog.d(TAG, "acquireWakeLockInternal: lock=" + Objects.hashCode(lock)
@@ -876,9 +957,66 @@ public final class PowerManagerService extends SystemService
                     notifyWakeLockChangingLocked(wakeLock, flags, tag, packageName,
                             uid, pid, ws, historyTag);
                     wakeLock.updateProperties(flags, tag, packageName, ws, historyTag, uid, pid);
+                    // @ WAKEBLOCK
+                    if (wakeLock.mTag != tag) {
+                        synchronized (wakeBlockLock) {
+                            if (wakeBlockBound) {
+                                try {
+                                    Message message = Message.obtain(null, 2);
+                                    android.os.Bundle bundle = new android.os.Bundle();
+                                    bundle.putBinder("lock", lock);
+                                    bundle.putString("old_tag", tag);
+                                    bundle.putString("new_tag", tag);
+                                    message.setData(bundle);
+                                    message.replyTo = wakeBlockClient;
+                                    wakeBlockServer.send(message);
+                                } catch (RemoteException exception) {
+                                    wakeBlockServer = null;
+                                    wakeBlockBound = false;
+                                }
+                            }
+                            if (wakeBlockBound) {
+                                try {
+                                    wakeBlockLock.wait();
+                                } catch (InterruptedException exception) {
+                                }
+                            }
+                        }
+                    }
+                    // # WAKEBLOCK
                 }
                 notifyAcquire = false;
             } else {
+                // @ WAKEBLOCK
+                synchronized (wakeBlockLock) {
+                    if (wakeBlockBound) {
+                        wakeBlockOk = true;
+                        try {
+                            Message message = Message.obtain(null, 0);
+                            android.os.Bundle bundle = new android.os.Bundle();
+                            bundle.putBinder("lock", lock);
+                            bundle.putString("tag", tag);
+                            bundle.putString("package_name", packageName);
+                            message.setData(bundle);
+                            message.replyTo = wakeBlockClient;
+                            wakeBlockServer.send(message);
+                        } catch (RemoteException exception) {
+                            wakeBlockServer = null;
+                            wakeBlockBound = false;
+                            wakeBlockOk = true;
+                        }
+                    }
+                    if (wakeBlockBound) {
+                        try {
+                            wakeBlockLock.wait();
+                        } catch (InterruptedException exception) {
+                        }
+                        if (!wakeBlockOk) {
+                            return;
+                        }
+                    }
+                }
+                // # WAKEBLOCK
                 wakeLock = new WakeLock(lock, flags, tag, packageName, ws, historyTag, uid, pid);
                 try {
                     lock.linkToDeath(wakeLock, 0);
@@ -945,6 +1083,30 @@ public final class PowerManagerService extends SystemService
             }
 
             WakeLock wakeLock = mWakeLocks.get(index);
+            // @ WAKEBLOCK
+            synchronized (wakeBlockLock) {
+                if (wakeBlockBound) {
+                    try {
+                        Message message = Message.obtain(null, 1);
+                        android.os.Bundle bundle = new android.os.Bundle();
+                        bundle.putString("tag", wakeLock.mTag);
+                        bundle.putBinder("lock", lock);
+                        message.setData(bundle);
+                        message.replyTo = wakeBlockClient;
+                        wakeBlockServer.send(message);
+                    } catch (RemoteException exception) {
+                        wakeBlockServer = null;
+                        wakeBlockBound = false;
+                    }
+                    if (wakeBlockBound) {
+                        try {
+                            wakeBlockLock.wait();
+                        } catch (InterruptedException exception) {
+                        }
+                    }
+                }
+            }
+            // # WAKEBLOCK
             if (DEBUG_SPEW) {
                 Slog.d(TAG, "releaseWakeLockInternal: lock=" + Objects.hashCode(lock)
                         + " [" + wakeLock.mTag + "], flags=0x" + Integer.toHexString(flags));
@@ -971,6 +1133,30 @@ public final class PowerManagerService extends SystemService
                 return;
             }
 
+            // @ WAKEBLOCK
+            synchronized (wakeBlockLock) {
+                if (wakeBlockBound) {
+                    try {
+                        Message message = Message.obtain(null, 1);
+                        android.os.Bundle bundle = new android.os.Bundle();
+                        bundle.putString("tag", wakeLock.mTag);
+                        bundle.putBinder("lock", wakeLock.mLock);
+                        message.setData(bundle);
+                        message.replyTo = wakeBlockClient;
+                        wakeBlockServer.send(message);
+                    } catch (RemoteException exception) {
+                        wakeBlockServer = null;
+                        wakeBlockBound = false;
+                    }
+                    if (wakeBlockBound) {
+                        try {
+                            wakeBlockLock.wait();
+                        } catch (InterruptedException exception) {
+                        }
+                    }
+                }
+            }
+            // # WAKEBLOCK
             removeWakeLockLocked(wakeLock, index);
         }
     }
